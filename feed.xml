<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://hunterstanton.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hunterstanton.com/" rel="alternate" type="text/html" /><updated>2019-04-18T19:32:47-05:00</updated><id>https://hunterstanton.com/feed.xml</id><title type="html">Hunter Stanton</title><subtitle>Independent security researcher and iOS developer.</subtitle><entry><title type="html">Fuzzing on Windows with CERT’s Basic Fuzzing Framework</title><link href="https://hunterstanton.com/post/2019/04/18/Fuzzing-on-Windows-with-BFF.html" rel="alternate" type="text/html" title="Fuzzing on Windows with CERT's Basic Fuzzing Framework" /><published>2019-04-18T11:00:00-05:00</published><updated>2019-04-18T11:00:00-05:00</updated><id>https://hunterstanton.com/post/2019/04/18/Fuzzing%20on%20Windows%20with%20BFF</id><content type="html" xml:base="https://hunterstanton.com/post/2019/04/18/Fuzzing-on-Windows-with-BFF.html">&lt;p&gt;As anyone that is knowledgable in the field of security is probably aware, fuzz testing is an essential part of the toolkit. After all, it would be virtually impossible to test as many inputs as something like AFL can - with a proper fuzzing setup and a fast executable (or a slower executable with some patches to skip things such as disk writes and checksums, in some cases), you can hit thousands of executions per second. Well, recently, I’ve been getting a bit more serious about fuzzing, and since I primarily have a desire to fuzz Windows applications, I decided I’d talk about my experience using &lt;a href=&quot;https://vuls.cert.org/confluence/display/tools/CERT+BFF+-+Basic+Fuzzing+Framework&quot;&gt;CERT’s Basic Fuzzing Framework&lt;/a&gt; and share a few tips.&lt;/p&gt;

&lt;p&gt;First off, I’d like to say that I am aware that AFL has a port to Windows called &lt;a href=&quot;https://github.com/googleprojectzero/winafl&quot;&gt;WinAFL&lt;/a&gt;. I’ve used it in the past, and it is just as every bit as excellent of a fuzzer on Windows as it is anywhere else. However, it can be tricky to setup, especially if you’re fuzzing complex black box targets like I mainly do (I really love fuzzing games as a hobby).&lt;/p&gt;

&lt;p&gt;I’ve recently been relying a lot more on CERT’s BFF. Sure, it’s not as fast as AFL. It’s also not as smart (AFL’s heuristics are seriously impressive) however I do think that it is the quickest way to get into fuzzing a black box target. You can set up a new campaign in about 5 minutes and you’re off to the races, and that was the idea CERT had in mind when they were creating it. They intended for it to be a quick, intelligent enough fuzzer that anyone can get into fuzzing with, and it serves that purpose well.&lt;/p&gt;

&lt;p&gt;One of the problems I’ve ran into with fuzzing game engines is that, a lot of the time, you can’t directly launch into a specific map or game session right from the command prompt. However, I have come up with a solution, and that solution is basically to set the fuzz target to a batch file that sets up the game files properly so that fuzzing can still occur. Generally this involves copying the current fuzzing iteration to the game directory, and launching the game. The one limitation to this is that you’re limited to a corpus of only the files that the game will need to load immediately. Some games have a built in feature to load up a specific map or run commands on startup (Source Engine games are great for this) but most games don’t. For example, one of my prior fuzz targets was Halo Combat Evolved: there are no command line parameters to load up Halo CE into a specific map, so I simply fuzzed the &lt;em&gt;ui.map&lt;/em&gt; file. It is loaded instantly upon starting the executable, so I was still able to fuzz the .map format.&lt;/p&gt;

&lt;p&gt;Here is the batch file that I’ve got going for Halo Combat Evolved:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy &quot;%1&quot; &quot;C:\Program Files (x86)\Microsoft Games\Halo\maps\ui.map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd &quot;C:\Program Files (x86)\Microsoft Games\Halo&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start /wait halo -window -safemode -vidmode 320,240,60&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To break it down a bit, first we copy the seed into the proper location with the proper name so it will overwrite the original UI.map with the current fuzz iteration. Next, we’ll switch directories over to the Halo Custom Edition directory. Then, we’ll start Halo with the &lt;em&gt;/wait&lt;/em&gt; flag (which allows BFF to catch crashes that occur, otherwise the batch file will just close after launch and BFF will think the fuzzing iteration is finished) and we also set the video mode to a low resolution and run it in a window. That’s not strictly necessary, I just do that to speedup the game’s launch for faster fuzzing. The batch file runs every fuzzing iteration, so a new, freshly mutated ui.map gets copied into the right place every single time.&lt;/p&gt;

&lt;p&gt;This can also be applied as a generic processing step for the seed. I’ve used a similar batch file in the past to put the seed into a zip file first before copying it over as the application in question would only take ZIPs and I didn’t want to fuzz the ZIP container parsing code. You could probably do something like fix checksums if you want (however, I’d strongly recommend just patching out checksum code if you can).&lt;/p&gt;

&lt;p&gt;Anyway, that’s been my experience with BFF. While there are definitely better fuzzing options out there, BFF can be setup to run very quickly with any executable in existence, and I think it’s definitely a valuable tool to have around. I’ve found several good bugs with it and I hope to keep finding more in the future.&lt;/p&gt;</content><author><name></name></author><summary type="html">As anyone that is knowledgable in the field of security is probably aware, fuzz testing is an essential part of the toolkit. After all, it would be virtually impossible to test as many inputs as something like AFL can - with a proper fuzzing setup and a fast executable (or a slower executable with some patches to skip things such as disk writes and checksums, in some cases), you can hit thousands of executions per second. Well, recently, I’ve been getting a bit more serious about fuzzing, and since I primarily have a desire to fuzz Windows applications, I decided I’d talk about my experience using CERT’s Basic Fuzzing Framework and share a few tips.</summary></entry><entry><title type="html">CVE-2019-6591 - Reflected XSS in Big-IP APM</title><link href="https://hunterstanton.com/writeups/2019/02/07/CVE-2019-6591-XSS-in-BIG-IP-Webtops-through-XML-injection.html" rel="alternate" type="text/html" title="CVE-2019-6591 - Reflected XSS in Big-IP APM" /><published>2019-02-07T08:00:00-06:00</published><updated>2019-02-07T08:00:00-06:00</updated><id>https://hunterstanton.com/writeups/2019/02/07/CVE-2019-6591-XSS-in-BIG-IP-Webtops-through-XML-injection</id><content type="html" xml:base="https://hunterstanton.com/writeups/2019/02/07/CVE-2019-6591-XSS-in-BIG-IP-Webtops-through-XML-injection.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently, I was doing recon during a private bug bounty program, and I came across an interesting endpoint. This endpoint appeared to be for corporate employees to be able to download a pre-configured VPN client so they could gain access to the corporate VPN. Here is what it looked like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20719/main.png&quot; alt=&quot;Big-IP APM Webtops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, not much is provided outside of a few basic options, but I figured those basic options might still be hiding some vulnerabilities.&lt;/p&gt;

&lt;h2 id=&quot;investigating-the-attack-surface&quot;&gt;Investigating the attack surface&lt;/h2&gt;

&lt;p&gt;Like any bug seasoned bug hunter, I took note of a few things immediately:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The “Find Resource” option&lt;/li&gt;
  &lt;li&gt;The “Logout” button (sign-in was not provided at any point, it appeared to auto-generate a session)&lt;/li&gt;
  &lt;li&gt;The “Welcome to F5 Networks” text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, I decided to track down exactly what software was running here based on the URL of the page and the clues I was given. After a few quick Google searches, I determined it to be Big-IP APM with Webtops enabled. Next, I checked to see if there were any known vulnerabilities. Unfortunately, it didn’t seem like there were any that would work on the version this particular endpoint was running, so I knew that I needed to find a new vulnerability and would be able to get a CVE in Big-IP itself if I succeeded.&lt;/p&gt;

&lt;p&gt;Next, I tried the basic stuff, such as XSS through the Find Resource functionality, by pasting in HTML tags into the search box. It all led to dead ends, so I knew I’d have to dig even deeper and it wouldn’t be simple to find a vulnerability. I fired up my proxy and refreshed the page to get a deeper look at the endpoints that were available. There weren’t a lot, considering the limited functionality of this endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20719/endpoints.png&quot; alt=&quot;Endpoints in Charles Proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s not a ton of endpoints that are available, as you can see, and the ones that are available are very limited.&lt;/p&gt;

&lt;h2 id=&quot;something-stands-out&quot;&gt;Something Stands Out&lt;/h2&gt;

&lt;p&gt;Immediately my eye was attracted to one in particular, &lt;strong&gt;“/vdesk/resource_list_v2.xml?prtn=/Common/&amp;amp;wl_list=Client_Windows+Client_Mac”&lt;/strong&gt; - it seemed to be the endpoint that was queried when the web page needed to get information about the applications that were available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20719/rlv2.png&quot; alt=&quot;resource_list_v2.xml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I messed around with it a bit and discovered that arbitrary XML tags could be injected into the document through the “prtn” parameter, which would appear unmodified in the response. Since it’s XML we’re talking about here, I tried out injecting a DOCTYPE in the hopes that the server would potentially parse it, but that came up empty and it doesn’t seem to actually do anything with the response after it is generated other than send it to the user. On the other side of that same coin, I knew that if I could inject an XHTML script tag, XSS could be triggered because the browser would simply intepret it as an XHTML document.&lt;/p&gt;

&lt;p&gt;My first attempt was met with failure - I could get a normal script tag in there, but it would not be parsed as XHTML. I needed to get the XHTML XMLNS attribute injected as well, so I crossed my fingers and tried it. Needless to say, it didn’t quite work, as the endpoint was automatically stripping out : from the prtn parameter, stopping you from forming the proper XMLNS attribute needed. At this point, I was defeated, and walked away for a few days. So close, yet so far away.&lt;/p&gt;

&lt;h2 id=&quot;a-few-days-later&quot;&gt;A few days later…&lt;/h2&gt;
&lt;p&gt;I thought about some ways to get past this problem. I remembered that you can encode any character as an HTML character entity, so I tried injecting the XMLNS attribute in my script tag encoded as HTML character entities. That didn’t work either, as the server was decoding them itself before generating the response, so it was treating it as if I didn’t encode it at all.&lt;/p&gt;

&lt;p&gt;Then, I had another idea: what if I encoded the HTML character entities into HTML character entities? (so &lt;strong&gt;&amp;amp;#x61;&lt;/strong&gt; becomes &lt;strong&gt;&amp;amp;#x26;&amp;amp;#x23;&amp;amp;#x78;&amp;amp;#x36;&amp;amp;#x31;&amp;amp;#x3B;&lt;/strong&gt;) I figured the server wouldn’t decode them twice, so I gave it a shot. Then this happened…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20719/xss.png&quot; alt=&quot;Successful cross-site scripting vulnerability&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Turns out, when you double encode, the server &lt;em&gt;does&lt;/em&gt; only decode once, and then the browser does the last step of the decoding and allows you to form the valid XHTML script tag, enabling reflected XSS to be performed in all browsers.&lt;/p&gt;

&lt;p&gt;Furthermore, XSS cannot be triggered if the users session has expired. If try to perform the attack, and the victim lacks a valid session, the endpoint will 302 re-direct to establish a session. Fortunately for us, the endpoint that actually creates the session does &lt;em&gt;not&lt;/em&gt; use iframe protection. An attacker can simply create a website that will establish a session using an iframe, and then redirect the victim to the XSS payload. This trick allows XSS regardless of if you have a valid session or not.&lt;/p&gt;

&lt;p&gt;Happy with my victory, I quickly reported the issue to F5 Networks and the private bug bounty program.&lt;/p&gt;

&lt;h1 id=&quot;timeline&quot;&gt;Timeline:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;12/7/2018&lt;/strong&gt; - Vulnerability Discovered, reported to F5 Networks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12/17/2018&lt;/strong&gt; - F5 Networks responds and says they have confirmed the vulnerability and are working on a patch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1/29/2019&lt;/strong&gt; - The vulnerability is resolved in Big-IP (APM) 14.1.0, 13.1.1.4, and 12.1.1 and assigned &lt;strong&gt;CVE-2019-6591&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In closing&lt;/h2&gt;

&lt;p&gt;I’d just like to say that if something seems impossible at first, don’t stop hammering away at it. I almost walked away from this bug completely - I just happened to come back a while later and keep at it, because I had a hunch that there was a way to pull it off, and it turned out I was right in the end. I cannot tell you how many bugs I’ve found after dropping my investigation and then coming back a while later, refreshed and with some new ideas to try out. Never give up, and you’ll succeed eventually a lot of the time.&lt;/p&gt;

&lt;p&gt;I’d just like to thank F5 Networks for being professional and fixing this issue promptly, and to thank you as well for reading this point. See you next time!&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Hello, world!</title><link href="https://hunterstanton.com/post/2019/02/06/hello-world.html" rel="alternate" type="text/html" title="Hello, world!" /><published>2019-02-06T10:13:42-06:00</published><updated>2019-02-06T10:13:42-06:00</updated><id>https://hunterstanton.com/post/2019/02/06/hello-world</id><content type="html" xml:base="https://hunterstanton.com/post/2019/02/06/hello-world.html">&lt;p&gt;Welcome to the new blog for 2019. I have abandoned the previous theme, as I found it to be quite unappealing. Anyway, this is where I’ll drop cool security and iOS dev related stuff. Thanks for reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to the new blog for 2019. I have abandoned the previous theme, as I found it to be quite unappealing. Anyway, this is where I’ll drop cool security and iOS dev related stuff. Thanks for reading.</summary></entry></feed>